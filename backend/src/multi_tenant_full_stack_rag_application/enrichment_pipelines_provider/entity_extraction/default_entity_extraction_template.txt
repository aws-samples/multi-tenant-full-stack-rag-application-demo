Below is real estate document. Your job is to extract nodes and edges to build a knowledge graph. 
A node is an entity like a company, person, property, contingency, the document itself, or any subject 
that relates to another in the context of the document. An edge is a relationship between two nodes, 
like "John Smith is the CEO of Acme Corp".

When extracting nodes, it's vital to ensure consistency. If a node, such as "Acme Corp", is mentioned multiple 
times in the text but is referred to by different names (e.g., "Acme"), always use the most complete identifier 
for that entity throughout the knowledge graph. In this example, use "Acme Corp" as the node ID, but write it 
lower case with underscores instead of spaces, like "acme_corp" instead of "Acme Corp." If you find additional 
information, add it as a property on the node or edge. Also add the full name of the company as an attribute 
of the node.

Each node should have at least the fields `id`, `name`, and `type`. The `id` is the unique identifier, 
and the `type` is the type of entity, like 'company' or 'executive'. If possible, include address info
for city, state, and zip code in separate node attributes. You can include other attributes. 
if you find them. 

The source node always acts on the target node in the way described by the edge label.
For example, if the document talks about Dave buying a property at 1234 Any st, Anytown, Anystate 1111 
from John Doe, Dave could be a source node with an edge "buys from" and a target John. Dave could be a
source, with an edge "buys" and a target for the property node.

So the example output might be:
<example_only>
<json>
{
  "nodes": [
      {
          "id": "1234_any_st_anytown_anystate_11111",
          "type": "property",
          "name": "1234 Any St, Anytown, Anystate 11111",
          "street_address": "1234 Any St",
          "city": "Anytown",
          "state": "CA",
          "zip": "11111"
      },
      {
          "id": "dave",,
          "type": "person",
          "name": "Dave"
      },
      {
          "id": "john_doe",,
          "type": "person",
          "name": "John Doe"
      }
  ],
  "edges": [
      {
          "source": "dave",
          "edge_label": "buys",
          "target": "1234_any_st_anytown_anystate_11111",
      },
      {
          "source": "john_doe",
          "edge_label": "sells"
          "target": "1234_any_st_anytown_anystate_11111",
      },
      {
          "source": "dave",
          "edge_label": "buys_from"
          "target": "john_doe",
      },
      {
          "source": "john_doe",
          "edge_label": "sells_to"
          "target": "dave",
      },
  ]
}
</json>
</example_only>

Note that there may be other types of nodes or edges in the documents, not 
just the examples given above. First think about the document's most important
points, then output one node record for each of the main subject or target concepts that the page is about.
Then create one edge record for each of the edge connections between the connected source and target nodes. 
Don't get too verbose creating nodes and edges, but cover the main concepts in the given text.

Here is the graph schema found in other documents in this collection
so far. If possible, reuse these node and edge labels rather than creating new ones that are semantically similar, but please add new ones if there are newly discovered nodes or edges.

<GRAPH_DATABASE_SCHEMA>
{graph_schema}
</GRAPH_DATABASE_SCHEMA>

Here's the document you need to process:
<DOCUMENT>
{document_content}
</DOCUMENT>

Limit your output to only the important nodes in the text.

You must output only valid JSON. Be concise - do not provide any extra text before or after the JSON.

<JSON>
