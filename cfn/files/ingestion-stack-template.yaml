Outputs:
  IngestionStatusTableNameOutput:
    Export:
      Name: IngestionStatusTableName
    Value: !Ref DdbTableIngestionStatusTable32816510
  IngestionStatusProviderFunctionArnOutput:
    Export:
      Name: IngestionStatusProviderFunctionArn
    Value:
      Fn::GetAtt:
        - IngestionStatusProviderFunctionE9E064BF
        - Arn
  IngestionStatusTableStreamArnOutput:
    Export:
      Name: IngestionStatusTableStreamArn
    Value:
      Fn::GetAtt:
        - DdbTableIngestionStatusTable32816510
        - StreamArn

Resources:
  IngestionBucket4CBA59AA:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionBucket/IngestionBucket/Resource
  DdbTableIngestionStatusTable32816510:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: doc_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: doc_id
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/DdbTable/IngestionStatusTable/Resource
  IngestionStatusProviderFunctionServiceRole4982D6C2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusProviderFunction/ServiceRole/Resource
  IngestionStatusProviderFunctionServiceRoleDefaultPolicyAF322013:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ssm:GetParameter
              - ssm:GetParametersByPath
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/mtfsrad-b-dev*
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              !ImportValue CognitoAuthProviderFunctionArn
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - DdbTableIngestionStatusTable32816510
                  - Arn
              - Ref: AWS::NoValue
          - Action: s3:DeleteObject*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - IngestionBucket4CBA59AA
                      - Arn
                  - /*
        Version: "2012-10-17"
      PolicyName: IngestionStatusProviderFunctionServiceRoleDefaultPolicyAF322013
      Roles:
        - Ref: IngestionStatusProviderFunctionServiceRole4982D6C2
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusProviderFunction/ServiceRole/DefaultPolicy/Resource
  IngestionStatusProviderFunctionSecurityGroupBEB94B8C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function mtfsradbdevIngestionProviderStackIngestionStatusProviderFunction6E8F4298
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        !ImportValue VpcId
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusProviderFunction/SecurityGroup/Resource
  IngestionStatusProviderFunctionE9E064BF:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 8339ce23b125193fa62181fd65bb5a48b7e252b72fcb9d1e9c807b47ffa96665.zip
      Environment:
        Variables:
          AWS_ACCOUNT_ID:
            Ref: AWS::AccountId
          EMBEDDING_MODEL_ID: amazon.titan-embed-text-v2:0
          INGESTION_BUCKET:
            Ref: IngestionBucket4CBA59AA
          INGESTION_STATUS_TABLE:
            Ref: DdbTableIngestionStatusTable32816510
          STACK_NAME: mtfsrad-b-dev
          UPDATED: "2024-09-20T23:02:00Z"
      Handler: multi_tenant_full_stack_rag_application.ingestion_provider.ingestion_status_provider.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - IngestionStatusProviderFunctionServiceRole4982D6C2
          - Arn
      Runtime: python3.11
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - IngestionStatusProviderFunctionSecurityGroupBEB94B8C
              - GroupId
        SubnetIds:
          - !ImportValue PrivateIsolatedSubnetId1
          - !ImportValue PrivateIsolatedSubnetId2
    DependsOn:
      - IngestionStatusProviderFunctionServiceRoleDefaultPolicyAF322013
      - IngestionStatusProviderFunctionServiceRole4982D6C2
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusProviderFunction/Resource
      aws:asset:path: asset.8339ce23b125193fa62181fd65bb5a48b7e252b72fcb9d1e9c807b47ffa96665
      aws:asset:is-bundled: true
      aws:asset:property: Code
  VectorIngestionFunctionServiceRoleCCAA25E8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/VectorIngestionFunction/ServiceRole/Resource
  VectorIngestionFunctionServiceRoleDefaultPolicy1455DD67:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - IngestionStatusProviderFunctionE9E064BF
                  - Arn
              - !ImportValue BedrockProviderFunctionArn
              - !ImportValue DocCollectionsHandlerFunctionArn
              - !ImportValue EmbeddingsProviderFunctionArn
              - !ImportValue VectorStoreProviderFunctionArn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - IngestionStatusProviderFunctionE9E064BF
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - !ImportValue BedrockProviderFunctionArn
                    - :*
              - Fn::Join:
                  - ""
                  - - !ImportValue DocCollectionsHandlerFunctionArn
                    - :*
              - Fn::Join:
                  - ""
                  - - !ImportValue EmbeddingsProviderFunctionArn
                    - :*
              - Fn::Join:
                  - ""
                  - - !ImportValue VectorStoreProviderFunctionArn
                    - :*
          - Action:
              - ssm:GetParameter
              - ssm:GetParametersByPath
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/mtfsrad-b-dev*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - DdbTableIngestionStatusTable32816510
                  - Arn
              - Ref: AWS::NoValue
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - IngestionBucket4CBA59AA
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - IngestionBucket4CBA59AA
                        - Arn
                    - /*
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - IngestionQueueA7BB0414
                - Arn
          - Action:
              - es:ESHttpDelete
              - es:ESHttpGet
              - es:ESHttpHead
              - es:ESHttpPatch
              - es:ESHttpPost
              - es:ESHttpPut
            Effect: Allow
            Resource:
              - !ImportValue OpenSearchDomainArn
              - Fn::Join:
                  - ""
                  - - !ImportValue OpenSearchDomainArn
                    - /*
              - Fn::Join:
                  - ""
                  - - !ImportValue OpenSearchDomainArn
                    - /*/*
        Version: "2012-10-17"
      PolicyName: VectorIngestionFunctionServiceRoleDefaultPolicy1455DD67
      Roles:
        - Ref: VectorIngestionFunctionServiceRoleCCAA25E8
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/VectorIngestionFunction/ServiceRole/DefaultPolicy/Resource
  VectorIngestionFunction62AAF58F:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code:
        ImageUri:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:72020a573de4665a600ee732bd09717d8e13900c386b7920d8086fc2f8ca57d3
      Environment:
        Variables:
          AWS_ACCOUNT_ID:
            Ref: AWS::AccountId
          EMBEDDING_MODEL_ID: amazon.titan-embed-text-v2:0
          STACK_NAME: mtfsrad-b-dev
          INGESTION_STATUS_TABLE:
            Ref: DdbTableIngestionStatusTable32816510
          OCR_MODEL_ID: anthropic.claude-3-haiku-20240307-v1:0
          UPDATED: "2024-09-20T23:02:00Z"
      EphemeralStorage:
        Size: 10240
      MemorySize: 4096
      PackageType: Image
      Role:
        Fn::GetAtt:
          - VectorIngestionFunctionServiceRoleCCAA25E8
          - Arn
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue AppSecurityGroupId
        SubnetIds:
          - !ImportValue PrivateIsolatedSubnetId1
          - !ImportValue PrivateIsolatedSubnetId2
    DependsOn:
      - VectorIngestionFunctionServiceRoleDefaultPolicy1455DD67
      - VectorIngestionFunctionServiceRoleCCAA25E8
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/VectorIngestionFunction/Resource
      aws:asset:path: asset.72020a573de4665a600ee732bd09717d8e13900c386b7920d8086fc2f8ca57d3
      aws:asset:dockerfile-path: ingestion_provider/Dockerfile.vector_ingestion_provider
      aws:asset:property: Code.ImageUri
  CognitoAuthDocBucketPolicyA449C9AB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - IngestionBucket4CBA59AA
                      - Arn
                  - /private/${cognito-identity.amazonaws.com:sub}/*
          - Action: s3:ListBucket
            Condition:
              StringLike:
                s3:prefix:
                  - private/${cognito-identity.amazonaws.com:sub}/
                  - private/${cognito-identity.amazonaws.com:sub}/*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - IngestionBucket4CBA59AA
                - Arn
        Version: "2012-10-17"
      PolicyName: CognitoAuthDocBucketPolicyA449C9AB
      Roles:
        - Fn::Select:
            - 1
            - Fn::Split:
                - /
                - Fn::Select:
                    - 5
                    - Fn::Split:
                        - ":"
                        - !ImportValue CognitoAuthenticatedRoleArn
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/CognitoAuthDocBucketPolicy/Resource
  IngestionQueueIngestionQueueDLQ72DA3DFE:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionQueue/IngestionQueueDLQ/Resource
  IngestionQueueA7BB0414:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - IngestionQueueIngestionQueueDLQ72DA3DFE
            - Arn
        maxReceiveCount: 2
      VisibilityTimeout: 900
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionQueue/IngestionQueue/Resource
  IngestionQueuePolicyE9B26FBA:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Fn::GetAtt:
                - IngestionQueueA7BB0414
                - Arn
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":s3:::"
                      - Ref: IngestionBucket4CBA59AA
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Fn::GetAtt:
                - IngestionQueueA7BB0414
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: IngestionQueueA7BB0414
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionQueue/IngestionQueue/Policy/Resource
  IngestionQueueIngestionBucketToQueueTriggerStackIngestionEventTriggerNotifications16CF9ED1:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: IngestionBucket4CBA59AA
      NotificationConfiguration:
        QueueConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: private
            QueueArn:
              Fn::GetAtt:
                - IngestionQueueA7BB0414
                - Arn
      Managed: false
    DependsOn:
      - IngestionQueuePolicyE9B26FBA
      - IngestionQueueA7BB0414
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionQueue/IngestionBucketToQueueTriggerStack/IngestionEventTrigger/Notifications/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              strToHash=json.dumps(n, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  QueueToFunctionTriggerIngestionQueueToFunctionTriggerEventSource6B52139A:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
          - IngestionQueueA7BB0414
          - Arn
      FunctionName:
        Ref: VectorIngestionFunction62AAF58F
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/QueueToFunctionTrigger/IngestionQueueToFunctionTriggerEventSource/Resource
  IngestionStatusFunctionName27D168C6:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mtfsrad-b-dev/ingestion_status_provider_function_name
      Type: String
      Value:
        Ref: IngestionStatusProviderFunctionE9E064BF
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusFunctionName/Resource
  IngestionStatusProviderOriginParamFBF77892:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mtfsrad-b-dev/origin_ingestion_status_provider
      Type: String
      Value:
        Ref: IngestionStatusProviderFunctionE9E064BF
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionStatusProviderOriginParam/Resource
  IngestionProviderFunctionNameBD775DBA:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mtfsrad-b-dev/ingestion_provider_function_name
      Type: String
      Value:
        Ref: VectorIngestionFunction62AAF58F
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionProviderFunctionName/Resource
  IngestionProviderOriginParam3C5E579F:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mtfsrad-b-dev/origin_ingestion_provider
      Type: String
      Value:
        Ref: VectorIngestionFunction62AAF58F
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: mtfsrad-b-dev/IngestionProviderStack/IngestionProviderOriginParam/Resource
